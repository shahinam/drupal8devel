<?php

/**
 * @file
 * Install, update and uninstall functions for the metatag module.
 */

/**
 * Remove tags in field storage that match default or are empty.
 */
function metatag_update_8101() {
  // Get all of the field storage entities of type metatag.
  $field_storage_configs = \Drupal::entityManager()
    ->getStorage('field_storage_config')
    ->loadByProperties(array('type' => 'metatag'));

  foreach ($field_storage_configs as $key => $field_storage) {
    $field_name = $field_storage->getName();

    // Get the individual fields (field instances) associated with bundles.
    $fields = \Drupal::entityManager()
      ->getStorage('field_config')
      ->loadByProperties(array('field_name' => $field_name));

    // For each of the fields, delete all records that match the defaults.
    foreach ($fields as $field) {
      // Get the bundle this field is attached to.
      $bundle = $field->getTargetBundle();

      // Get the default value for this field on this bundle.
      $field_default_tags_value = $field->getDefaultValueLiteral();
      $field_default_tags_value = $field_default_tags_value[0]['value'];
      $field_default_tags = unserialize($field_default_tags_value);

      // Determine the table and "value" field names.
      $field_table = "node__$field_name";
      $field_value_field = "$field_name" . "_value";

      // Delete all records where the field value and default are identical.
      db_delete($field_table)
        ->condition('bundle', $bundle, '=')
        ->condition($field_value_field, $field_default_tags_value, '=')
        ->execute();
    }
  }

  return t('Removed all default meta tag records so they can be automatically inherited when the page is loaded.');
}

/**
 * Remove tags in field storage that match default or are empty.
 */
function metatag_update_8102(&$sandbox) {
  // This whole top section only needs to be done the first time.
  if (!isset($sandbox['records_processed'])) {
    $sandbox['records_processed'] = 0;
    $sandbox['total_records'] = 0;
    $sandbox['current_field'] = 0;
    $sandbox['current_record'] = 0;

    // Counter to enumerate the fields so we can access them in the array
    // by number rather than name.
    $field_counter = 0;

    // Get all of the field storage entities of type metatag.
    $field_storage_configs = \Drupal::entityManager()
      ->getStorage('field_storage_config')
      ->loadByProperties(array('type' => 'metatag'));

    foreach ($field_storage_configs as $key => $field_storage) {
      $field_name = $field_storage->getName();

      // Get the individual fields (field instances) associated with bundles.
      $fields = \Drupal::entityManager()
        ->getStorage('field_config')
        ->loadByProperties(array('field_name' => $field_name));

      // For each of the fields, do the mass delete of exact matches but
      // store the overridden records in the sandbox to be batch processed.
      foreach ($fields as $field) {
        // Get the bundle this field is attached to.
        $bundle = $field->getTargetBundle();

        // Get the default value for this field on this bundle.
        $field_default_tags_value = $field->getDefaultValueLiteral();
        $field_default_tags_value = $field_default_tags_value[0]['value'];
        $field_default_tags = unserialize($field_default_tags_value);

        // Determine the table and "value" field names.
        $field_table = "node__$field_name";
        $field_value_field = "$field_name" . "_value";

        // Get all records where the field data does not match the default.
        $query = db_select($field_table);
        $query->addField($field_table, 'entity_id');
        $query->addField($field_table, 'revision_id');
        $query->addField($field_table, 'langcode');
        $query->addField($field_table, $field_value_field);
        $query->condition('bundle', $bundle, '=');
        $result = $query->execute();
        $records = $result->fetchAll();

        // Fill in all the sandbox information so we can batch the individual
        // record comparing and updating.
        $sandbox['fields'][$field_counter]['field_table'] = $field_table;
        $sandbox['fields'][$field_counter]['field_value_field'] = $field_value_field;
        $sandbox['fields'][$field_counter]['field_default_tags'] = $field_default_tags;
        $sandbox['fields'][$field_counter]['records'] = $records;

        $sandbox['total_records'] += count($sandbox['fields'][$field_counter]['records'] = $records);
        $field_counter++;
      }
    }
  }

  if ($sandbox['total_records'] == 0) {
    // No partially overridden fields so we can skip the whole batch process.
    $sandbox['#finished'] = 1;
  }
  else {
    // Begin the batch processing of individual field records.
    $max_per_batch = 10;
    $counter = 1;

    $current_field = $sandbox['current_field'];
    $current_field_records = $sandbox['fields'][$current_field]['records'];
    $current_record = $sandbox['current_record'];

    $field_table = $sandbox['fields'][$current_field]['field_table'];
    $field_value_field = $sandbox['fields'][$current_field]['field_value_field'];
    $field_default_tags = $sandbox['fields'][$current_field]['field_default_tags'];

    // Loop through the field(s) and remove any field data that matches the
    // field default for that bundle. Because the ability to override a default
    // with "nothing" didn't exist prior to this and because any tag that had
    // a default of "nothing" would have that also in the field data, we are
    // removing those as well.
    while ($counter <= $max_per_batch && $record = $current_field_records[$current_record]) {
      // Strip any empty tags or ones matching the field's defaults and leave
      // only the overridden tags in $new_tags.
      $current_tags = unserialize($record->$field_value_field);
      $new_tags = array();
      foreach ($current_tags as $key => $tag) {
        if (!empty($tag) && $field_default_tags[$key] != $tag) {
          $new_tags[$key] = $tag;
        }
      }

      if (empty($new_tags)) {
        // All tags were either empty or matched the default so the record can
        // be deleted.
        db_delete($field_table)
          ->condition('entity_id', $record->entity_id)
          ->condition('revision_id', $record->revision_id)
          ->condition('langcode', $record->langcode)
          ->execute();
      }
      else {
        // There are some overridden tags so update the record with just those.
        $tags_string = serialize($new_tags);
        db_update($field_table)
          ->fields(array(
            $field_value_field => $tags_string,
          ))
          ->condition('entity_id', $record->entity_id)
          ->condition('revision_id', $record->revision_id)
          ->condition('langcode', $record->langcode)
          ->execute();
      }

      $counter++;
      $current_record++;
    }

    if (!isset($current_field_records[$current_record])) {
      // We ran out of records for the field so start the next batch out with
      // the next field.
      $current_field++;
      $current_record = 0;
    }

    if (!isset($sandbox['fields'][$current_field])) {
      // We have finished all the fields. All done.
      $sandbox['records_processed'] += $counter-1;
      $sandbox['#finished'] = 1;
    }
    else {
      // Update the sandbox values to prepare for the next round.
      $sandbox['current_field'] = $current_field;
      $sandbox['current_record'] = $current_record;
      $sandbox['records_processed'] += $counter-1;
      $sandbox['#finished'] = $sandbox['records_processed'] / $sandbox['total_records'];
    }
  }

  if ($sandbox['total_records'] > 0) {
    return (string) t('Processed @processed of @total overridden Metatag records.', array(
      '@processed' => $sandbox['records_processed'],
      '@total' => $sandbox['total_records']
    ));
  }
  else {
    return (string) t("There were no overridden Metatag records.");
  }
}
